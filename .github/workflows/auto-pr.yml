name: Auto PR on branch push

on:
  push:
    branches-ignore:
      - main

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run tests (continue on error)
        id: tests
        continue-on-error: true
        run: |
          set -o pipefail
          pytest -q | tee pytest-output.txt

      - name: Collect files changed
        run: |
          git fetch origin main || true
          git diff --name-status origin/main... > files-changed.txt || true

      - name: Create PR if not exists
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const branch = process.env.GITHUB_REF.replace('refs/heads/','');
            const base = 'main';
            if (branch === base) { core.info('Skip on base branch'); return; }
            const { data: existing } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branch}`
            });
            if (existing.length) {
              core.info(`PR already exists: ${existing[0].html_url}`);
              core.setOutput('pr_url', existing[0].html_url);
              return;
            }
            let body = '';
            if (fs.existsSync('.github/auto-pr-body.md')) {
              body += fs.readFileSync('.github/auto-pr-body.md', 'utf8');
              body += '\n\n';
            }
            if (fs.existsSync('pytest-output.txt')) {
              body += '## CI test output\n\n';
              body += '```
';
              body += fs.readFileSync('pytest-output.txt', 'utf8');
              body += '
```
\n';
            }
            if (fs.existsSync('files-changed.txt')) {
              body += '## Files changed\n\n';
              body += '```
';
              body += fs.readFileSync('files-changed.txt', 'utf8');
              body += '
```
';
            }
            const title = `Auto PR: ${branch}`;
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: branch,
              base,
              title,
              body,
            });
            core.setOutput('pr_url', pr.html_url);
